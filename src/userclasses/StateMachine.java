/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.components.InfiniteProgress;
import com.codename1.components.MultiButton;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.l10n.L10NManager;
import com.codename1.processing.Result;
import com.codename1.ui.*; 
import com.codename1.ui.events.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.spinner.DateSpinner;
import com.codename1.ui.table.DefaultTableModel;
import com.codename1.ui.table.Table;
import com.codename1.ui.table.TableModel;
import com.codename1.ui.util.Resources;
import ec.sgs.mobile.bean.Clasificacion;
import ec.sgs.mobile.bean.ControlEmbarque;
import ec.sgs.mobile.bean.DetalleCajas;
import ec.sgs.mobile.bean.Producto;
import ec.sgs.mobile.bean.util.Utileria;
import ec.sgs.mobile.cn1.Configuracion;
import generated.StateMachineBase;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    
    private final L10NManager lnm = L10NManager.getInstance();
    private Storage storage;
    
    private String inspeccionService;

    private String secuencial;
    private String codigoInspector="";
    
    //Controles de Configuracion
    private TextField servidor;
    private TextField puerto;
    private TextField inspector;
    
    // Controles de Inspeccion
    private TextField contenedorNum;
    private TextField tamano;
    private TextField chasis;
    private TextField trailerPlaca;
    private TextField cliente;
    private DateSpinner fecha;
    private TextField agencia;
    private TextField vapor;
    private TextField destino;
    private TextField factura;

    private CheckBox puertaIzquierda;
    private CheckBox puertaDerecha;
    private CheckBox paredFrontalInternaIzquierda;
    private CheckBox paredFrontalInternaDerecha;
    private CheckBox cables;
    private CheckBox flucs;
    private CheckBox ladosExternosIzquierda;
    private CheckBox ladosExternosDerecha;
    private CheckBox ladosInternosIzquierda;
    private CheckBox ladosInternosDerecha;
    private CheckBox techo;
    private CheckBox piso;
    private CheckBox estructuraInferior;
    private CheckBox estructuraInterna;
    private CheckBox chasisEstado;

    private TextArea observaciones;
    
    //Controles de InspeccionBusqueda
    private ControlEmbarque controlEmbarque;
    private RadioButton contenedorRad;
    private RadioButton clienteRad;
    private TextField   valor;
    private Container   listadoInspecciones;
    
    //Controles de ControlEmbarque
    private Producto  producto;
    private int       productoIndex;
    private Table    infoCE;
    private String   inspeccionItemId;
    private Map      inspeccionItem;
    private CheckBox quitarElementoCE;
    
    //Controles de Producto1
    private Clasificacion clasificacion;
    private int           clasificacionIndex;
    private CheckBox  quitarElementoP1;
    private TextField marcaP1;
    private TextField descripcionPesosP1;
    private TextField presentacionP1;
    private TextField empaqueP1;
    private TextField tipoProductoP1;
    
    //Controles para Clasificacion
    private TextField     modelo;
    
    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }
    
    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        Util.register("Configuracion", Configuracion.class);
    }

    private void definirConfiguracion(){
        Dialog.show ("Configuración", "Defina los datos de configuración del equipo", "OK", null);
        showForm("ConfiguracionFrm", null);
    }
    
    @Override
    protected void postMain(Form f) {
        storage = Storage.getInstance();
        //Lee la configuración del móvil
        Configuracion obj = (Configuracion)storage.readObject("configuracion");
        if (obj!=null){
            inspeccionService = "http://" + obj.getServidor() +":" + obj.getPuerto() +"/server/rest/inspeccion/"  ;
            codigoInspector = obj.getInspector();
            //System.out.println(inspeccionService);
        }else{
            definirConfiguracion();
        }

    }
    
    @Override
    protected void beforeConfiguracionFrm(Form f) {
        servidor  = findServidor();
        puerto    = findPuerto();
        inspector = findInspector();       

        //Si ya existe el registro, llenar los controles con su dato
        Configuracion obj = (Configuracion)storage.readObject("configuracion");
        if (obj!=null){
            servidor  . setText ( obj.getServidor  ());
            puerto    . setText ( obj.getPuerto    ());
            inspector . setText ( obj.getInspector ());
        }
    }

    @Override
    protected void onConfiguracionFrm_GrabarAction(Component c, ActionEvent event) {
        Configuracion obj = new Configuracion();
        obj.setServidor(servidor.getText());
        obj.setPuerto(puerto.getText());
        obj.setInspector(inspector.getText());

        storage.writeObject("configuracion", obj);
        showForm("Main", null);
    }

    @Override
    protected void postInspeccionFrm(Form f) {
    }

    @Override
    protected void beforeInspeccionFrm(Form f) {
        //Constraints
        contenedorNum                = findContenedorNum();
        tamano                       = findTamano();
        chasis                       = findChasis();       
        trailerPlaca                 = findTrailerPlaca();
        cliente                      = findCliente();
        fecha                        = findFecha();
        agencia                      = findAgencia();
        vapor                        = findVapor();
        destino                      = findDestino();
        factura                      = findFactura();

	puertaIzquierda              = findPuertaIzquierda();
	puertaDerecha                = findPuertaDerecha();
	paredFrontalInternaIzquierda = findParedFrontalInternaIzquierda();
	paredFrontalInternaDerecha   = findParedFrontalInternaDerecha();
	cables                       = findCables();
	flucs                        = findFlucs();
	ladosExternosIzquierda       = findLadosExternosIzquierda();
	ladosExternosDerecha         = findLadosExternosDerecha();
	ladosInternosIzquierda       = findLadosInternosIzquierda();
	ladosInternosDerecha         = findLadosInternosDerecha();
	techo                        = findTecho();
	piso                         = findPiso();
	estructuraInferior           = findEstructuraInferior();
	estructuraInterna            = findEstructuraInterna();
	chasisEstado                 = findChasisEstado();
        
        observaciones                = findObservaciones();

        /*
        Button grabar = findGrabar();
        Validator v = new Validator();
        v.
            addConstraint(contenedorNum, new LengthConstraint(11)).
            addConstraint(tamano, new LengthConstraint(2)
        );
        v.addSubmitButtons(grabar);
        */
    }

    @Override
    protected void onInspeccionFrm_GrabarAction(Component c, ActionEvent event) {
        //https://groups.google.com/forum/#!topic/codenameone-discussions/tGPeQrNRO58
        //https://stackoverflow.com/questions/39063909/how-to-post-json-to-a-rest-webservice-in-codenameone
        
        Hashtable h = new Hashtable();
        // (populate the requestuest object here)
        String mes = "" + fecha.getCurrentMonth();
        String dia = "" + fecha.getCurrentDay();
        
        String strMes = "00".substring(mes.length()) + mes;
        String strDia = "00".substring(dia.length()) + dia;
        
        //TODO: Verificar aplicación de fecha
        String fechaSeleccionada = fecha.getCurrentYear() +"/"+
        strMes +"/"+strDia;
        
        h.put("id"           , "");
        h.put("contenedor"   , contenedorNum                . getText() );
        h.put("tamano"       , tamano                       . getText() );
        h.put("chasis"       , chasis                       . getText() );
        h.put("placa"        , trailerPlaca                 . getText() );
        h.put("cliente"      , cliente                      . getText() );
        h.put("fecha"        , fechaSeleccionada            . toString() );
        h.put("agencia"      , agencia                      . getText() );
        h.put("vapor"        , vapor                        . getText() );
        h.put("destino"      , destino                      . getText() );
        h.put("factura"      , factura                      . getText() );
        h.put("pta_izq"      , puertaIzquierda              . isSelected() );
        h.put("pta_der"      , puertaDerecha                . isSelected() );
        h.put("pfi_izq"      , paredFrontalInternaIzquierda . isSelected() );
        h.put("pfi_der"      , paredFrontalInternaDerecha   . isSelected() );
        h.put("ur_izq"       , cables                       . isSelected() );
        h.put("ur_der"       , flucs                        . isSelected() );
        h.put("le_izq"       , ladosExternosIzquierda       . isSelected() );
        h.put("le_der"       , ladosExternosDerecha         . isSelected() );
        h.put("li_izq"       , ladosInternosIzquierda       . isSelected() );
        h.put("li_der"       , ladosInternosDerecha         . isSelected() );
        h.put("techo"        , techo                        . isSelected() );
        h.put("piso"         , piso                         . isSelected() );
        h.put("est_inf"      , estructuraInferior           . isSelected() );
        h.put("est_int"      , estructuraInterna            . isSelected() );
        h.put("chasis_estado", chasisEstado                 . isSelected() );
        h.put("observaciones", observaciones                . getText() );
        h.put("inspector"    , codigoInspector );

        // convert the object to a JSON document
        final String inspeccion = Result.fromContent(h).toString();
        
        JSONParser parser = new JSONParser();

        // override, by default this method writes NVPs.
        ConnectionRequest request;
        request = new ConnectionRequest() {
            
            Map result;
            protected void buildRequestBody(OutputStream os) throws IOException {
                os.write(inspeccion.getBytes("UTF-8"));
            }
            protected void readResponse(InputStream inputStream) throws IOException  {
                result = parser.parseJSON(new InputStreamReader(inputStream, "UTF-8"));
                //System.out.println(result);
            }
            protected void postResponse() {
                // response completed, this is called on the EDT do the application logic here...S
                secuencial = (String) result.get("id");
            }
        };
        request.setUrl(inspeccionService + "add");
        request.setPost(true);
        request.setContentType("application/json");
        
        InfiniteProgress infiniteProgress = new InfiniteProgress();
        Dialog dialog = infiniteProgress.showInifiniteBlocking();
        request.setDisposeOnCompletion(dialog);
        
        //NetworkManager.getInstance().addToQueue(request);
        NetworkManager.getInstance().addToQueueAndWait(request);
        
        if (request.getResponseCode()==200 && secuencial.length() > 0){
            Dialog.show ("Inspecciones", "Secuencial generado: " + secuencial, "OK", null);
        }
        showForm("Main", null);
    }

    @Override
    protected void beforeInspeccionBusqueda(Form f) {
        controlEmbarque     = new ControlEmbarque();
        contenedorRad       = findContenedorRad();
        clienteRad          = findClienteRad();
        valor               = findValor();
        listadoInspecciones = findListadoInspecciones();
        inspeccionItemId    = "";
    }

    @Override
    protected void onInspeccionBusqueda_BuscarAction(Component c, ActionEvent event) {
        String campo = contenedorRad.isSelected() ? "contenedor": "cliente";
        //System.out.println(campo);
        
        JSONParser parser = new JSONParser();

        // override, by default this method writes NVPs.
        ConnectionRequest request;
        request = new ConnectionRequest() {
            
            //Map result;
            Map<String,Object> result;
            protected void readResponse(InputStream inputStream) throws IOException  {
                result = parser.parseJSON(new InputStreamReader(inputStream, "UTF-8"));
                
                listadoInspecciones.removeAll();
                //Limpiamos el container
                java.util.List<Map<String, Object>> content = (java.util.List<Map<String, Object>>)result.get("root");
                for ( Map<String, Object> obj : content) {

                    String id = (String) obj.get("id");
                    String contenedor = (String) obj.get("contenedor");
                    String cliente = (String) obj.get("cliente");
                    String fecha = (String) obj.get("fecha");
                    
                    MultiButton mb = new MultiButton(contenedor);
                    mb.setTextLine2(id+" "+fecha+" "+cliente);
                    mb.setUIID(id);
                    mb.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent ev) {
                            //System.out.println( mb.getUIID() );
                            inspeccionItemId = mb.getUIID();
                            showForm("ControlEmbarqueFrm", null);
                        }
                    });
                    
                    listadoInspecciones.add(mb);
                }
            }
            protected void postResponse() {
                // response completed, this is called on the EDT do the application logic here...S
            }
        };
        request.setUrl(inspeccionService + "list/"+campo+"/"+valor.getText());
        request.setPost(true);
        request.setContentType("application/json");
        
        InfiniteProgress infiniteProgress = new InfiniteProgress();
        Dialog dialog = infiniteProgress.showInifiniteBlocking();
        request.setDisposeOnCompletion(dialog);
        
        NetworkManager.getInstance().addToQueueAndWait(request);
        
    }

    private void leerDatosInspeccion(){
        JSONParser parser = new JSONParser();

        ConnectionRequest request;
        request = new ConnectionRequest() {
            
            Map result;
            protected void readResponse(InputStream inputStream) throws IOException  {
                result = parser.parseJSON(new InputStreamReader(inputStream, "UTF-8"));
            }
            protected void postResponse() {
                //Almacener el mapa para mostrar la tabla.
                inspeccionItem = result;
            }
        };
        request.setUrl(inspeccionService + "get/"+inspeccionItemId);
        request.setPost(true);
        request.setContentType("application/json");
        
        InfiniteProgress infiniteProgress = new InfiniteProgress();
        Dialog dialog = infiniteProgress.showInifiniteBlocking();
        request.setDisposeOnCompletion(dialog);
        
        NetworkManager.getInstance().addToQueueAndWait(request);    
    }
    
    @Override
    protected void beforeControlEmbarqueFrm(Form f) {
        quitarElementoCE   = findQuitarElementoCE();
        
        leerDatosInspeccion();
        infoCE             = findInfoCE();
        
        String[][] valores = new String[][] {
            {"ID"         , (String)inspeccionItem.get("id")},
            {"CONTENEDOR" , (String)inspeccionItem.get("contenedor")},
            {"CLIENTE"    , (String)inspeccionItem.get("cliente")},
            {"FECHA"      , (String)inspeccionItem.get("fecha")},
            {"AGENCIA"    , (String)inspeccionItem.get("agencia")},
            {"VAPOR"      , (String)inspeccionItem.get("vapor")},
            {"DESTINO"    , (String)inspeccionItem.get("destino")},
            {"FACTURA"    , (String)inspeccionItem.get("factura")}
        };
   
        TableModel model = new DefaultTableModel(new String[]{"Campo", "Valor"}, valores);
        infoCE.setModel(model);
        
        productoListaMostrar();
    }

    @Override
    protected void onControlEmbarqueFrm_AgregarProductoCEAction(Component c, ActionEvent event) {
        productoAgregar();
    }

    @Override
    protected void beforeProductoFrm(Form f) {
        quitarElementoP1   = findQuitarElementoP1();
        marcaP1            = findMarcaP1();
        descripcionPesosP1 = findDescripcionPesosP1();
        presentacionP1     = findPresentacionP1();
        empaqueP1          = findEmpaqueP1();
        tipoProductoP1     = findTipoProductoP1();
        
        marcaP1.            setText(producto.getMarca());
        descripcionPesosP1. setText(producto.getDescripcionPesos());
        presentacionP1.     setText(producto.getPresentacion());
        empaqueP1.          setText(producto.getEmpaque());
        tipoProductoP1.     setText(producto.getTipoProducto());
        
        clasificacionListaMostrar();
    }
    
    private boolean validarCampo(String campo, String etiqueta){
        if (campo.length()==0){
            Dialog.show ("Validación", "Debe ingresar datos en ["+etiqueta+"]", "OK", null);
            return true;
        }
        return false;
    }
    
    @Override
    protected void onProductoFrm_GrabarProductoP1Action(Component c, ActionEvent event) {
        productoGrabar();
    }

    @Override
    protected void onProductoFrm_AgregarClasificacionP1Action(Component c, ActionEvent event) {
        clasificacionAgregar();
    }

    @Override
    protected void beforeClasificacionFrm(Form f) {
        modelo   = findModelo();
        Table cajasPorFila = findCajasPorFila();
        
        modelo.setText(clasificacion.getModelo());

        //https://stackoverflow.com/questions/12231453/syntax-for-creating-a-two-dimensional-array
        /*
        Object[][] valores = {
            {1, ""}, {2, ""}, {3, ""}, {4, ""}, {5, ""}, {6, ""}, {7, ""}, {8, ""}, {9, ""}, {10, ""}, {11, ""}, {12, ""},
            {13, ""}, {14, ""}, {15, ""}, {16, ""}, {17, ""}, {18, ""}, {19, ""}, {20, ""}, {21, ""}, {22, ""}, {23, ""},
            {24, ""}, {25, ""}, {26, ""}, {27, ""}, {28, ""}, {29, ""}, {30, ""}, {31, ""}, {32, ""}, {33, ""}, {34, ""},
        };
        */
        int tamano = 34;
        Object[][] valores = new Object[tamano][2];
        for (int i=0; i<tamano; i++){
            int fila = i+1;
            
            //Recorrer el objeto clasificacion y determinar el valor de la cantidad en la fila especificada
            String cantidadCajas = "";
            int cantidad = clasificacion.getCantidadEnFila(fila);
            if (cantidad > 0)
                cantidadCajas = ""+cantidad;
            valores[i][0] = fila;
            valores[i][1] = cantidadCajas;
        }
        
        TableModel model = new DefaultTableModel(new String[]{"Fila", "Cantidad de cajas"}, valores){
            public boolean isCellEditable(int row, int col) {
                return col != 0;
            }
        };
        cajasPorFila.setModel(model);
    }

    @Override
    protected void onClasificacionFrm_GrabarClasificacionCAction(Component c, ActionEvent event) {
        clasificacionGrabar();
    }

    //Seleccionar haciendo clien en uno de los elementos...
    @Override
    protected void onProductoFrm_ClasificacionesAction(Component c, ActionEvent event) {
        clasificacionAccionar();
    }

    @Override
    protected void onControlEmbarqueFrm_ProductosAction(Component c, ActionEvent event) {
        productoAccionar();
    }
    
    private void clasificacionAgregar(){
        clasificacion = new Clasificacion();
        clasificacionIndex = -1;
        showForm("ClasificacionFrm", null);
    }

    private void clasificacionListaMostrar(){
        Vector items = new Vector();
        for(Clasificacion clasificacion: producto.getClasificaciones()){
            Hashtable table = new Hashtable();
            table.put("Pojo"  , clasificacion); //Agrego el POJO
            table.put("Line2" , clasificacion.getModelo());
            table.put("Line3" , clasificacion.getTotalCajas()+" cajas"); //Total de cajas
            items.addElement(table);
        }
        List lista = findClasificaciones();
        lista.setModel(new DefaultListModel(items));
    }

    private void clasificacionGrabar(){
        String strModelo = modelo.getText();
        
        if ( validarCampo(strModelo, "Modelo") )
            return;
        
        java.util.List <DetalleCajas> detalles = new ArrayList();
        TableModel model = findCajasPorFila().getModel();
        short totalCantidad = 0;
        for (int i=0; i < model.getRowCount(); i++){

            short cantidad = Utileria.parseToShort((String)model.getValueAt(i, 1));
            if (cantidad > 0){
                DetalleCajas detalle = new DetalleCajas();
                detalle.setFila((short)(i+1));
                detalle.setCantidad(cantidad);
                //System.out.println(cantidad);
                detalles.add(detalle);
                totalCantidad += cantidad;
            }
        }
        
        if (totalCantidad==0){
            Dialog.show ("Validación", "No ha ingresado cantidades de cajas.", "OK", null);
            return;
        }

        clasificacion.setModelo(strModelo);
        clasificacion.setDetalleCajas(detalles);
        
        if (clasificacionIndex >=0 ){
            producto.getClasificaciones().set(clasificacionIndex, clasificacion);
            clasificacionIndex = -1;
        }else
            producto.getClasificaciones().add(clasificacion);

        showForm("ProductoFrm", null);
    }
    
    private void clasificacionAccionar(){
        List lista = findClasificaciones();
        Hashtable table = (Hashtable)lista.getSelectedItem();
        clasificacionIndex = lista.getSelectedIndex();
        
        if (quitarElementoP1.isSelected()){
            if (Dialog.show("Confirme", "¿Desea eliminar el ítem?", "Yes", "No")){
                producto.getClasificaciones().remove(clasificacionIndex);
                clasificacionIndex = -1;
                clasificacionListaMostrar();
            }
        }else{
            //Obtener el objeto y mostrar sus datos para modificación...
            clasificacion = (Clasificacion)table.get("Pojo");
            showForm("ClasificacionFrm",null);
        }
    }
    
    private void productoAgregar(){
        producto = new Producto();
        productoIndex = -1;
        showForm("ProductoFrm", null);
    }
 
    private void productoListaMostrar(){
        Vector items = new Vector();
        for (Producto producto: controlEmbarque.getProductos()){
            Hashtable table = new Hashtable();
            table.put("Pojo"     , producto); //Agrego el POJO
            table.put("Line2"    , producto.getMarca());
                items.addElement(table);
        }
        List lista = findProductos();
        lista.setModel(new DefaultListModel(items));
    }

    private void productoGrabar(){
        String strMarca = marcaP1.getText();
        if ( validarCampo(strMarca, "Marca") )
            return;
        
        String strDescPesos = descripcionPesosP1.getText();
        if ( validarCampo(strDescPesos, "Descripción pesos") )
            return;

        String strPresentacion = presentacionP1.getText();
        if ( validarCampo(strPresentacion, "Presentación") )
            return;
        
        String strEmpaque = empaqueP1.getText();
        if ( validarCampo(strEmpaque, "Empaque") )
            return;
        
        String strTipoProducto = tipoProductoP1.getText();
        if ( validarCampo(strTipoProducto, "Tipo de producto") )
            return;

        producto.setMarca(strMarca);
        producto.setDescripcionPesos(strDescPesos);
        producto.setPresentacion(strPresentacion);
        producto.setEmpaque(strEmpaque);
        producto.setTipoProducto(strTipoProducto);
        
        if (productoIndex >= 0){
            controlEmbarque.getProductos().set(productoIndex, producto);
            productoIndex = -1;
        }else
            controlEmbarque.getProductos().add(producto);

        showForm("ControlEmbarqueFrm", null);
    }
    
    private void productoAccionar(){
        List lista = findProductos();
        Hashtable table = (Hashtable)lista.getSelectedItem();
        productoIndex = lista.getSelectedIndex();
        
        if (quitarElementoCE.isSelected()){
            if (Dialog.show("Confirme", "¿Desea eliminar el ítem?", "Yes", "No")){
                controlEmbarque.getProductos().remove(productoIndex);
                productoIndex = -1;
                productoListaMostrar();
            }
        }else{
            //Obtener el objeto y mostrar sus datos para modificación...
            producto = (Producto)table.get("Pojo");
            showForm("ProductoFrm", null);
        }
        
    }
}